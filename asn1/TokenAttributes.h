/*
 * Generated by asn1c-0.9.22.1409 (http://lionet.info/asn1c)
 * From ASN.1 module "MCS-PROTOCOL-3"
 * 	found in "mcs.asn1"
 * 	`asn1c -fnative-types -fskeletons-copy -fcompound-names -gen-PER`
 */

#ifndef	_TokenAttributes_H_
#define	_TokenAttributes_H_


#include <asn_application.h>

/* Including external dependencies */
#include "TokenId.h"
#include "UserId.h"
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include <constr_SEQUENCE.h>
#include <asn_SET_OF.h>
#include <constr_SET_OF.h>
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum TokenAttributes_PR {
	TokenAttributes_PR_NOTHING,	/* No components present */
	TokenAttributes_PR_grabbed,
	TokenAttributes_PR_inhibited,
	TokenAttributes_PR_giving,
	TokenAttributes_PR_ungivable,
	TokenAttributes_PR_given
} TokenAttributes_PR;

/* Forward declarations */
struct NonStandardParameter;

/* TokenAttributes */
typedef struct TokenAttributes {
	TokenAttributes_PR present;
	union TokenAttributes_u {
		struct TokenAttributes__grabbed {
			TokenId_t	 tokenId;
			UserId_t	 grabber;
			struct TokenAttributes__grabbed__nonStandard {
				A_SEQUENCE_OF(struct NonStandardParameter) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *nonStandard;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} grabbed;
		struct TokenAttributes__inhibited {
			TokenId_t	 tokenId;
			struct TokenAttributes__inhibited__inhibitors {
				A_SET_OF(UserId_t) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} inhibitors;
			struct TokenAttributes__inhibited__nonStandard {
				A_SEQUENCE_OF(struct NonStandardParameter) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *nonStandard;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} inhibited;
		struct TokenAttributes__giving {
			TokenId_t	 tokenId;
			UserId_t	 grabber;
			UserId_t	 recipient;
			struct TokenAttributes__giving__nonStandard {
				A_SEQUENCE_OF(struct NonStandardParameter) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *nonStandard;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} giving;
		struct TokenAttributes__ungivable {
			TokenId_t	 tokenId;
			UserId_t	 grabber;
			struct TokenAttributes__ungivable__nonStandard {
				A_SEQUENCE_OF(struct NonStandardParameter) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *nonStandard;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} ungivable;
		struct TokenAttributes__given {
			TokenId_t	 tokenId;
			UserId_t	 recipient;
			struct TokenAttributes__given__nonStandard {
				A_SEQUENCE_OF(struct NonStandardParameter) list;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *nonStandard;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} given;
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} TokenAttributes_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_TokenAttributes;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "NonStandardParameter.h"

#endif	/* _TokenAttributes_H_ */
